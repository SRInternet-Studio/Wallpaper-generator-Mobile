name: 🚀 发布 Tauri 应用

on:
  workflow_dispatch: # 允许手动触发
  release:
    types: [published] # 当新的 Release 发布时触发

jobs:
  build-android:
    name: 🤖 构建安卓应用
    permissions:
      contents: write # 需要写入权限以上传 Release
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🐰 设置 Bun 环境
        uses: oven-sh/setup-bun@v1

      - name: 🗄️ 缓存 Bun 依赖
        id: cache-bun
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: 📦 安装前端依赖
        run: bun install

      - name: ☕ 设置 Java 环境
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: 📱 设置 Android SDK
        uses: android-actions/setup-android@v3

      - name: 🗄️ 缓存 Gradle 和 NDK
        id: cache-android
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ${{ env.ANDROID_HOME }}/ndk/27.0.11902837
          key: ${{ runner.os }}-gradle-ndk-${{ hashFiles('**/build.gradle.kts', '**/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-ndk-

      - name: ⬇️ 安装 NDK (如果缓存未命中)
        if: steps.cache-android.outputs.cache-hit != 'true'
        run: sdkmanager "ndk;27.0.11902837"

      - name: 🦀 安装 Rust stable 工具链
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android

      - name: 🗄️ 缓存 Rust 依赖 (Cargo)
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: 👷 构建安卓 APK
        id: build_apk
        env:
          NDK_HOME: ${{ env.ANDROID_HOME }}/ndk/27.0.11902837
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        run: |
          # 从 package.json 获取应用版本号
          APP_VERSION=$(bun -e "console.log(require('./package.json').version)")
          
          # 定义 APK 文件名并将其设置为步骤的输出
          ARM64_APK_NAME="tauri-app_${APP_VERSION}_arm64-v8a.apk"
          echo "apk_name=${ARM64_APK_NAME}" >> $GITHUB_OUTPUT
          
          # 如果提供了安卓签名密钥，则设置签名
          SIGNED_SUFFIX="-unsigned"
          if [ -n "${{ secrets.ANDROID_KEY_BASE64 }}" ]; then
            echo "检测到安卓签名密钥，开始进行签名构建。"
            SIGNED_SUFFIX=""
            
            # 创建 keystore.properties 文件
            echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" > src-tauri/gen/android/app/keystore.properties
            echo "password=${{ secrets.ANDROID_KEY_PASSWORD }}" >> src-tauri/gen/android/app/keystore.properties
            echo "storeFile=$RUNNER_TEMP/keystore.jks" >> src-tauri/gen/android/app/keystore.properties
            
            # 解码 Base64 密钥并创建 keystore 文件
            base64 -d <<< "${{ secrets.ANDROID_KEY_BASE64 }}" > $RUNNER_TEMP/keystore.jks
          else
            echo "未检测到安卓签名密钥，将进行未签名构建。"
          fi
          
          # 构建 arm64 架构的 APK
          bun run tauri android build -t aarch64
          # 注意：无论目标架构如何，输出路径总是 'universal'
          SOURCE_APK="src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release${SIGNED_SUFFIX}.apk"
          mv "$SOURCE_APK" "$ARM64_APK_NAME"

      - name: 🚀 上传到 Release (仅在发布新版时)
        if: github.event_name == 'release'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ github.event.release.tag_name }} ${{ steps.build_apk.outputs.apk_name }} --clobber

      - name: 📤 上传为构建产物 (仅在手动触发时)
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: ${{ steps.build_apk.outputs.apk_name }}
